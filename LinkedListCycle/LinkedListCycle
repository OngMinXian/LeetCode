# Definition for singly-linked list.
class ListNode:
    def __init__(self, x):
        self.val = x
        self.next = None

class Solution:
    def hasCycle(self, head) -> bool:

        slow_pointer = head
        fast_pointer = head

        while True:
            # Reached the end
            if slow_pointer == None or fast_pointer == None or fast_pointer.next == None:
                return False

            slow_pointer = slow_pointer.next
            fast_pointer = fast_pointer.next.next

            # Has cycle due to reaching same node again
            if slow_pointer == fast_pointer:
                return True
            